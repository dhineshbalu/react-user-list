{"version":3,"sources":["components/customersList.js","components/DateList.js","components/SelectedCustomer.js","App.js","serviceWorker.js","index.js"],"names":["useStyles1","makeStyles","theme","root","flexShrink","marginLeft","spacing","TablePaginationActions","props","classes","useTheme","count","page","rowsPerPage","onChangePage","className","IconButton","onClick","event","disabled","aria-label","direction","Math","ceil","max","useStyles2","table","minWidth","CustomersList","customersData","selectCustomer","React","useState","setPage","setRowsPerPage","emptyRows","min","length","TableContainer","component","Paper","Table","TableHead","TableRow","style","backgroundColor","TableCell","align","fontWeight","TableBody","slice","map","row","index","key","id","real_name","cursor","scope","tz","height","colSpan","TableFooter","TablePagination","rowsPerPageOptions","SelectProps","inputProps","native","newPage","onChangeRowsPerPage","parseInt","target","value","ActionsComponent","DateList","dateList","useEffect","start_time","end_time","getModalStyle","top","left","transform","useStyles","paper","position","width","palette","background","border","boxShadow","shadows","padding","overflowY","SelectedCustomer","selCust","onClose","modalStyle","open","setOpen","setDateList","selectedDate","setSelectedDate","activity_periods","filterDateList","selDate","dates","filter","l","stTime","Date","split","endTime","getDay","getMonth","getYear","body","textAlign","Grid","container","item","xs","utils","DateFnsUtils","disableToolbar","format","margin","label","onChange","date","KeyboardButtonProps","display","justifyContent","alignItems","Button","variant","color","Modal","aria-labelledby","aria-describedby","App","setState","selectedCustomer","showModal","state","customersListData","usersJson","ok","members","this","Fragment","letterSpacing","find","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.50ca5872.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableHead from '@material-ui/core/TableHead';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\n\nconst useStyles1 = makeStyles((theme) => ({\n  root: {\n    flexShrink: 0,\n    marginLeft: theme.spacing(2.5),\n  },\n}));\n\nfunction TablePaginationActions(props) {\n  const classes = useStyles1();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onChangePage } = props;\n\n  const handleFirstPageButtonClick = (event) => {\n    onChangePage(event, 0);\n  };\n\n  const handleBackButtonClick = (event) => {\n    onChangePage(event, page - 1);\n  };\n\n  const handleNextButtonClick = (event) => {\n    onChangePage(event, page + 1);\n  };\n\n  const handleLastPageButtonClick = (event) => {\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n\n  return (\n    <div className={classes.root}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </div>\n  );\n}\n\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n};\n\n\nconst useStyles2 = makeStyles({\n  table: {\n    minWidth: 500,\n  },\n});\n\nexport default function CustomersList({ customersData, selectCustomer }) {\n  const classes = useStyles2();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, customersData.length - page * rowsPerPage);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"custom pagination table\">\n        <TableHead>\n          <TableRow style={{backgroundColor: '#6383d6'}}>\n            <TableCell align=\"center\" style={{fontWeight: 'bold'}}>S.No</TableCell>\n            <TableCell align=\"center\" style={{fontWeight: 'bold'}}>Name</TableCell>\n            <TableCell align=\"center\" style={{fontWeight: 'bold'}}>Origin</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {(rowsPerPage > 0\n            ? customersData.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n            : customersData\n          ).map((row, index) => (\n            <TableRow key={'customerList' + row.id + row.real_name} style={{cursor: 'pointer'}} onClick={() => selectCustomer(row.id)}>\n              <TableCell align=\"center\" component=\"th\" scope=\"row\">\n              { page * rowsPerPage + index + 1}\n              </TableCell>\n              <TableCell align=\"center\">{row.real_name}</TableCell>\n              <TableCell align=\"center\">{row.tz}</TableCell>\n            </TableRow>\n          ))}\n          {emptyRows > 0 && (\n            <TableRow style={{ height: 1 * emptyRows }}>\n               {\n                  customersData.length ? (\n                    <TableCell align=\"center\" colSpan={3}></TableCell>\n                  ): ( <TableCell align=\"center\" colSpan={3}>No records found..</TableCell>)\n                }\n            </TableRow>\n          )}\n        </TableBody>\n        <TableFooter>\n          <TableRow>\n            <TablePagination\n              rowsPerPageOptions={[5, 10, 25]}\n              colSpan={3}\n              count={customersData.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              SelectProps={{\n                inputProps: { 'aria-label': 'rows per page' },\n                native: true,\n              }}\n              onChangePage={handleChangePage}\n              onChangeRowsPerPage={handleChangeRowsPerPage}\n              ActionsComponent={TablePaginationActions}\n            />\n          </TableRow>\n        </TableFooter>\n      </Table>\n    </TableContainer>\n  );\n}\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableHead from '@material-ui/core/TableHead';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\n\nconst useStyles1 = makeStyles((theme) => ({\n  root: {\n    flexShrink: 0,\n    marginLeft: theme.spacing(2.5),\n  },\n}));\n\nfunction TablePaginationActions(props) {\n  const classes = useStyles1();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onChangePage } = props;\n\n  const handleFirstPageButtonClick = (event) => {\n    onChangePage(event, 0);\n  };\n\n  const handleBackButtonClick = (event) => {\n    onChangePage(event, page - 1);\n  };\n\n  const handleNextButtonClick = (event) => {\n    onChangePage(event, page + 1);\n  };\n\n  const handleLastPageButtonClick = (event) => {\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n\n  return (\n    <div className={classes.root}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </div>\n  );\n}\n\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n};\n\n\nconst useStyles2 = makeStyles({\n  table: {\n    minWidth: 500,\n  },\n});\n\nexport default function DateList({ dateList }) {\n  const classes = useStyles2();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, dateList.length - page * rowsPerPage);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  useEffect(() => {\n     setPage(0)\n  }, [dateList])\n\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"custom pagination table\">\n        <TableHead>\n          <TableRow style={{backgroundColor: '#6383d6'}}>\n            <TableCell align=\"center\" style={{fontWeight: 'bold'}}>S.No</TableCell>\n            <TableCell align=\"center\" style={{fontWeight: 'bold'}}>Start Time</TableCell>\n            <TableCell align=\"center\" style={{fontWeight: 'bold'}}>End Time</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {(rowsPerPage > 0\n            ? dateList.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n            : dateList\n          ).map((row, index) => (\n            <TableRow key={ 'dateList' + index + row.start_time }>\n             <TableCell component=\"th\" scope=\"row\" align=\"center\">\n                { page * rowsPerPage + index + 1}\n              </TableCell>\n              <TableCell component=\"th\" scope=\"row\" align=\"center\">\n                {row.start_time}\n              </TableCell>\n              <TableCell component=\"th\" scope=\"row\" align=\"center\">\n                {row.end_time}\n              </TableCell>\n            </TableRow>\n          ))}\n\n          {emptyRows > 0 && (\n            <TableRow style={{ height: 1 * emptyRows }}>\n                {\n                  dateList.length ? (\n                    <TableCell align=\"center\" colSpan={3}></TableCell>\n                  ): ( <TableCell align=\"center\" colSpan={3}>No records found..</TableCell>)\n                }\n             \n            </TableRow>\n          )}\n        </TableBody>\n        <TableFooter>\n          <TableRow>\n            <TablePagination\n              rowsPerPageOptions={[5, 10, 25]}\n              colSpan={3}\n              count={dateList.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              SelectProps={{\n                inputProps: { 'aria-label': 'rows per page' },\n                native: true,\n              }}\n              onChangePage={handleChangePage}\n              onChangeRowsPerPage={handleChangeRowsPerPage}\n              ActionsComponent={TablePaginationActions}\n            />\n          </TableRow>\n        </TableFooter>\n      </Table>\n    </TableContainer>\n  );\n}\n","import React from 'react';\nimport DateList from \"./DateList\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\n\n\nfunction getModalStyle() {\n  const top = 50\n  const left = 50\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'fixed',\n    width: '75%',\n    height: '75%',\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n    overflowY: 'auto'\n  },\n}));\n\nexport default function SelectedCustomer({ selCust, onClose }) {\n  const classes = useStyles();\n  const [modalStyle] = React.useState(getModalStyle);\n  const [open, setOpen] = React.useState(true);\n  const [dateList, setDateList] = React.useState({})\n  const [selectedDate, setSelectedDate] = React.useState(null);\n\n  React.useEffect(() => {\n      if (selCust) {\n        setDateList(selCust.activity_periods)\n      }\n  }, [])\n\n  const handleClose = () => {\n    setOpen(false);\n    onClose()\n  };\n  const handleDateChange = (date) => {\n    setSelectedDate(date);\n    filterDateList(date)\n  };\n\n  const filterDateList = (selDate) => {\n     if (selCust && selCust.activity_periods) {\n         let dates = []\n         if (selDate) {\n            dates = selCust.activity_periods.filter((l) => {\n                let stTime =  new Date(l.start_time.split(' ')[0] + ' ' + l.start_time.split(' ')[1] + ' ' + l.start_time.split(' ')[2])\n                let endTime = new Date(l.end_time.split(' ')[0] + ' ' + l.end_time.split(' ')[1] + ' ' + l.end_time.split(' ')[2])\n                 return ((stTime.getDay() == selDate.getDay() && stTime.getMonth() == selDate.getMonth() && stTime.getYear() == selDate.getYear()) ||(endTime.getDay() == selDate.getDay() && endTime.getMonth() == selDate.getMonth() && endTime.getYear() == selDate.getYear()))\n             })\n         } else {\n           dates = selCust.activity_periods\n         }\n        setDateList(dates)\n     }\n  }\n\n  const body = (\n    <div style={modalStyle} className={classes.paper}>\n        <h2 style={{textAlign:'center'}}>Activity periods of {selCust.real_name}</h2>\n        <Grid container spacing={3}>\n            <Grid item xs={6}>\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                    <KeyboardDatePicker\n                    disableToolbar\n                    format=\"MM/dd/yyyy\"\n                    margin=\"normal\"\n                    id=\"date-picker-dialog\"\n                    label=\"Date picker dialog\"\n                    value={selectedDate}\n                    onChange={handleDateChange}\n                    KeyboardButtonProps={{\n                        'aria-label': 'change date',\n                    }}\n                    />\n                </MuiPickersUtilsProvider>\n            </Grid>\n            <Grid item xs={6} style={{display: 'flex', justifyContent: 'flex-end', alignItems: 'center'}} >\n                <Button variant=\"contained\" color=\"primary\" onClick={() => {\n                    setSelectedDate(null)\n                    filterDateList(null)\n                }}>\n                    Show All Periods\n                </Button>\n            </Grid>\n        </Grid>\n        <DateList dateList={dateList}></DateList>\n    </div>\n  );\n\n  return (\n    <div>\n      <Modal\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n      >\n        {body}\n      </Modal>\n    </div>\n  );\n}\n","import React from 'react';\nimport CustomersList from './components/customersList'\nimport SelectedCustomer from './components/SelectedCustomer'\nimport usersJson from './static/users.json'\nimport { find } from 'lodash'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n       customersListData: usersJson.ok === true ? usersJson.members : [],\n       selectedCustomer: null,\n       showModal: false\n    }\n  }\n  selectCustomer = (id) => {\n    this.setState({\n      selectedCustomer: id,\n      showModal: true\n    })\n  }\n  render() {\n    let { customersListData, showModal, selectedCustomer } = this.state\n     return (\n       <React.Fragment>\n         <h2 style={{textAlign: 'center', letterSpacing: '1px'}}>Customer's List</h2>\n         <CustomersList selectCustomer={this.selectCustomer} customersData={customersListData}></CustomersList>\n        {\n           showModal ?  <SelectedCustomer selCust={find(customersListData, {id: selectedCustomer})} onClose={() => {\n             this.setState({\n               SelectedCustomer: null,\n               showModal: false\n             })\n           }}></SelectedCustomer> : null\n        }\n       </React.Fragment>\n     )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n   </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}